name: release

on:
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GOPRIVATE: "github.com/tez-capital/*"
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.22.0'
      - name: Configure git for private modules
        env:
          TOKEN: ${{ secrets.PAT }}
        run: git config --global url."https://cryi:${TOKEN}@github.com".insteadOf "https://github.com"

      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: inject version and codename
        # PEAK_VERSION = "<VERSION>"
        # PEAK_CODENAME = "<CODENAME>"
        env: 
          TEZPEAK_VERSION: ${{ github.ref_name }}
          TEZPEAK_CODENAME: Mont D'Iberville
        run: |
          # patch constants/common.go
          sed -i "s/TEZPEAK_VERSION[[:space:]]*= \".*\"/TEZPEAK_VERSION = \"$TEZPEAK_VERSION\"/g" constants/common.go
          sed -i "s/TEZPEAK_CODENAME[[:space:]]*= \".*\"/TEZPEAK_CODENAME = \"$TEZPEAK_CODENAME\"/g" constants/common.go
          # patch web/src/common/constants.ts
          sed -i "s/TEZPEAK_VERSION[[:space:]]*= \".*\"/TEZPEAK_VERSION = \"$TEZPEAK_VERSION\"/g" web/src/common/constants.ts
          sed -i "s/TEZPEAK_CODENAME[[:space:]]*= \".*\"/TEZPEAK_CODENAME = \"$TEZPEAK_CODENAME\"/g" web/src/common/constants.ts

      - name: Install web dependencies
        working-directory: web
        run: npm install

      - name: Build web
        working-directory: web
        run: npm run build

      - name: Clone web to dist
        run: cp -r web/build/* web/dist

      # - name: Test
      #   run: go test -v ./...

      - name: Build win-arm64
        run: env CGO_ENABLED=0 GOOS=windows GOARCH=arm64 go build -ldflags="-s -w" -trimpath -o bin/tezpeak-win-arm64.exe
      - name: Build win-amd64
        run: env CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -trimpath -o bin/tezpeak-win-amd64.exe
      - name: Build linux-arm64
        run: env CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -trimpath -o bin/tezpeak-linux-arm64
      - name: Build linux-riscv64
        run: env CGO_ENABLED=0 GOOS=linux GOARCH=riscv64 go build -ldflags="-s -w" -trimpath -o bin/tezpeak-linux-riscv64
      - name: Build linux-amd64
        run: env CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -trimpath -o bin/tezpeak-linux-amd64
      - name: Build macos-arm64
        run: env CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -trimpath -o bin/tezpeak-macos-arm64
      - name: Build macos-amd64
        run: env CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -trimpath -o bin/tezpeak-macos-amd64

      - name: Upload files to a GitHub release
        uses: svenstaro/upload-release-action@2
        with:
          file_glob: true
          tag: ${{ github.ref }}
          file: bin/tezpeak*
          
  # build-containers:
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Login to ghcr.io
  #       uses: docker/login-action@v2
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v2
        
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Build and publish container
  #       uses: docker/build-push-action@v4
  #       with:
  #         file: ./container/Containerfile
  #         platforms: linux/amd64,linux/arm64
  #         build-args: GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
  #         tags: ghcr.io/tez-capital/tezpeak:latest,ghcr.io/tez-capital/tezpeak:${{github.ref_name}}
  #         push: true
  #         provenance: false

  #     - name: Build and publish riscv64 container
  #       uses: docker/build-push-action@v4
  #       with:
  #         file: ./container/riscv64/Containerfile
  #         platforms: linux/riscv64
  #         build-args: GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
  #         tags: ghcr.io/tez-capital/riscv64/tezpeak:latest,ghcr.io/tez-capital/riscv64/tezpeak:${{github.ref_name}}
  #         push: true
  #         provenance: false

  notify:
    runs-on: ubuntu-latest
    needs: [build] #, build-containers]
    steps:
      - name: Ami tezpeak Repository Dispatch
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.TZC_AMI_TEZPEAK_ACCESS }}
          repository: tez-capital/ami-tezpeak
          event-type: tezpeak-release
          client-payload: '{ "id": "${{ steps.repository_info.outputs.ID }}", "repository": "${{github.repository}}", "version": "${{github.ref_name}}" }'

      # - name: Notify new version available
      #   uses: Ilshidur/action-discord@master
      #   env:
      #     DISCORD_WEBHOOK: ${{ secrets.PB_DISCORD_WEBHOOK }}
      #   with:
      #       args: "New tezpeak ${{ github.ref_name }} released. (<https://github.com/tez-capital/tezpeak/releases/tag/${{ github.ref_name }}>)"
